import React, { useState, useEffect, useCallback } from 'react';
import { AdjustmentsHorizontalIcon, ArrowPathIcon } from '@heroicons/react/24/outline';
import PositionItem from './PositionItem';
import { useWalletContext } from '../../contexts/WalletContext';
import { usePinPetSdk } from '../../contexts/PinPetSdkContext';
import { config, convertIpfsUrl } from '../../config';
import { calculateLongProfitPercentage, calculateShortProfitPercentage, formatProfitPercentage } from '../../utils/profitCalculator';
import { getEmojiImage } from '../../config/emojiConfig';

const PositionPanel = ({ mintAddress = null }) => {
  // ‰ªé localStorage ËØªÂèñËøáÊª§Ê®°ÂºèÔºåÈªòËÆ§‰∏∫ "all"
  const getInitialFilterMode = () => {
    try {
      const saved = localStorage.getItem('pinpet_position_filter_mode');
      return saved === 'current' ? 'current' : 'all';
    } catch {
      return 'all';
    }
  };
  
  const [filterMode, setFilterMode] = useState(getInitialFilterMode());
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [positions, setPositions] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  
  // Ëé∑ÂèñÈí±ÂåÖÂú∞ÂùÄÂíå SDK
  const { walletAddress, connected } = useWalletContext();
  const { sdk, isReady } = usePinPetSdk();

  // ËΩ¨Êç¢APIÊï∞ÊçÆÂà∞UIÊ†ºÂºè
  const transformApiData = useCallback((apiOrders) => {
    return apiOrders.map((order) => {
      // ‰∏ìÊ≥®Ë∞ÉËØï‰ª∑Ê†º‰º†ÈÄíÈóÆÈ¢ò
      console.log('[PositionPanel] üîç API order latest_price Ë∞ÉËØï:', {
        ÂéüÂßãlatest_price: order.latest_price,
        Á±ªÂûã: typeof order.latest_price,
        Â≠óÁ¨¶‰∏≤ÂΩ¢Âºè: String(order.latest_price),
        ÊòØÂê¶‰∏∫undefined: order.latest_price === undefined,
        ÊòØÂê¶‰∏∫null: order.latest_price === null
      });

      // Ë∞ÉËØï realized_sol_amount
      console.log('[PositionPanel] üîç API order realized_sol_amount Ë∞ÉËØï:', {
        ÂéüÂßãrealized_sol_amount: order.realized_sol_amount,
        Á±ªÂûã: typeof order.realized_sol_amount,
        Â≠óÁ¨¶‰∏≤ÂΩ¢Âºè: String(order.realized_sol_amount),
        ÊòØÂê¶‰∏∫undefined: order.realized_sol_amount === undefined,
        ÊòØÂê¶‰∏∫null: order.realized_sol_amount === null,
        order_pda: order.order_pda
      });
      
      // ËÆ°ÁÆóÂÆåÊï¥ÁöÑÁõà‰∫èÊï∞ÊçÆ - Áõ¥Êé•‰ΩøÁî®ÂéüÂßã order ÂØπË±°
      let profitResult = null;
      if (isReady && sdk && order.order_type) {
        if (order.order_type === 1) {
          profitResult = calculateLongProfitPercentage(sdk, order);
        } else if (order.order_type === 2) {
          profitResult = calculateShortProfitPercentage(sdk, order);
        }
      }
      
      const profitPercentage = profitResult ? profitResult.profitPercentage : null;
      const netProfit = profitResult ? profitResult.netProfit : null;
      const grossProfit = profitResult ? profitResult.grossProfit : null;
      const stopLossPercentage = profitResult ? profitResult.stopLossPercentage : null;
      const profitDisplay = formatProfitPercentage(profitPercentage);

      return {
        // UIÊòæÁ§∫Â≠óÊÆµÔºà‰øùÊåÅÁé∞ÊúâÈÄªËæëÔºâ
        id: order.order_pda,
        tokenSymbol: order.symbol,
        tokenImage: convertIpfsUrl(order.image) || getEmojiImage('default', 40),
        pair: order.symbol,
        direction: order.order_type === 1 ? 'long' : 'short',
        orderPda: order.order_pda.slice(0, 6),
        mint: order.mint, // ‰øùÁïô mint Â≠óÊÆµÁî®‰∫éËøáÊª§
        
        // Êñ∞Â¢ûÁõà‰∫èÁõ∏ÂÖ≥Â≠óÊÆµ
        profitPercentage: profitPercentage,
        profitDisplay: profitDisplay,
        netProfit: netProfit,
        grossProfit: grossProfit,
        stopLossPercentage: stopLossPercentage,
        
        // ÂÆåÊï¥ÁöÑ order Êï∞ÊçÆÔºà‰øùÁïôÊâÄÊúâÂ≠óÊÆµ‰ª•Â§áÂêéÁî®Ôºâ
        order_type: order.order_type,
        user: order.user,
        lock_lp_start_price: order.lock_lp_start_price,
        lock_lp_end_price: order.lock_lp_end_price,
        lock_lp_sol_amount: order.lock_lp_sol_amount,
        lock_lp_token_amount: order.lock_lp_token_amount,
        start_time: order.start_time,
        end_time: order.end_time,
        margin_init_sol_amount: order.margin_init_sol_amount,
        margin_sol_amount: order.margin_sol_amount,
        borrow_amount: order.borrow_amount,
        position_asset_amount: order.position_asset_amount,
        borrow_fee: order.borrow_fee,
        realized_sol_amount: order.realized_sol_amount, // ÂÆûÁé∞Áõà‰∫èÁöÑsolÊï∞Èáè
        order_pda_full: order.order_pda, // ÂÆåÊï¥ÁöÑ order_pda
        latest_price: order.latest_price,
        latest_trade_time: order.latest_trade_time,
        name: order.name,
        symbol: order.symbol,
        image: order.image // ÂéüÂßãÂõæÁâáURL
      };
    });
  }, [isReady, sdk]);

  // Ëé∑ÂèñÊåÅ‰ªìÊï∞ÊçÆ
  const fetchPositions = useCallback(async () => {
    if (!connected || !walletAddress) {
      setPositions([]);
      return;
    }

    try {
      setIsLoading(true);
      setError(null);

      const apiUrl = `${config.pinpetApiUrl}/api/user_orders?user=${walletAddress}&page=1&limit=1000&order_by=start_time_desc`;
      
      console.log('üö®üö®üö® [PositionPanel] Ê≠£Âú®Ë∞ÉÁî®ÁöÑAPI URL:', apiUrl);
      console.log('üö®üö®üö® [PositionPanel] config.pinpetApiUrl:', config.pinpetApiUrl);
      console.log('üö®üö®üö® [PositionPanel] walletAddress:', walletAddress);
      
      const response = await fetch(apiUrl, {
        headers: {
          'accept': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      // ÂÖàËé∑ÂèñÂéüÂßãÊñáÊú¨ÔºåÊ£ÄÊü•Â§ßÊï∞Â≠óÁ≤æÂ∫¶ÈóÆÈ¢ò
      const textResponse = await response.text();
      console.log('[PositionPanel] üîç ÂéüÂßãJSONÊñáÊú¨‰∏≠ÁöÑlatest_price:', {
        ÂéüÂßãJSONÁâáÊÆµ: textResponse.substring(textResponse.indexOf('"latest_price"'), textResponse.indexOf('"latest_price"') + 50),
        ÂÆåÊï¥JSONÈïøÂ∫¶: textResponse.length
      });
      
      const result = JSON.parse(textResponse);
      console.log('[PositionPanel] üîç JSONËß£ÊûêÂêéÁöÑÊï∞ÊçÆË∞ÉËØï:', {
        JSONËß£ÊûêÂêéÁöÑlatest_price: result.data?.orders?.[0]?.latest_price,
        Êï∞ÊçÆÁ±ªÂûã: typeof result.data?.orders?.[0]?.latest_price,
        JavaScriptÂÆâÂÖ®Êï¥Êï∞ÊúÄÂ§ßÂÄº: Number.MAX_SAFE_INTEGER
      });

      if (result.success && result.data && result.data.orders) {
        const transformedPositions = transformApiData(result.data.orders);
        //console.log('[PositionPanel] Transformed positions:', transformedPositions);
        setPositions(transformedPositions);
      } else {
        console.warn('[PositionPanel] Invalid API response format:', result);
        setPositions([]);
      }

    } catch (error) {
      console.error('[PositionPanel] Failed to fetch positions:', error);
      setError(error.message);
      setPositions([]);
    } finally {
      setIsLoading(false);
    }
  }, [connected, walletAddress, transformApiData]);

  // ÁªÑ‰ª∂ÊåÇËΩΩÂíåÈí±ÂåÖËøûÊé•ÂèòÂåñÊó∂Ëé∑ÂèñÊï∞ÊçÆ
  useEffect(() => {
    fetchPositions();
  }, [fetchPositions]);

  // 10ÁßíÂæ™ÁéØËé∑ÂèñÊï∞ÊçÆ
  useEffect(() => {
    if (!connected || !walletAddress) {
      return;
    }

    const interval = setInterval(() => {
      fetchPositions();
    }, 10000); // 10Áßí

    return () => clearInterval(interval);
  }, [connected, walletAddress, fetchPositions]);

  // Â§ÑÁêÜËøáÊª§Ê®°ÂºèÂàáÊç¢
  const handleFilterToggle = () => {
    const newMode = filterMode === 'all' ? 'current' : 'all';
    setFilterMode(newMode);
    
    // ‰øùÂ≠òÂà∞ localStorage
    try {
      localStorage.setItem('pinpet_position_filter_mode', newMode);
    } catch (error) {
      console.warn('[PositionPanel] Failed to save filter mode to localStorage:', error);
    }
  };

  // Ê†πÊçÆËøáÊª§Ê®°ÂºèÂÜ≥ÂÆöÊòæÁ§∫ÁöÑÊåÅ‰ªì
  const getFilteredPositions = () => {
    if (filterMode === 'current' && mintAddress) {
      return positions.filter(position => position.mint === mintAddress);
    }
    
    // Show All Ê®°ÂºèÔºöÂ¶ÇÊûúÊúâÂΩìÂâç mintÔºåÂ∞ÜÂÖ∂ÊéíÂú®ÊúÄÂâçÈù¢
    if (filterMode === 'all' && mintAddress) {
      const currentMintPositions = positions.filter(position => position.mint === mintAddress);
      const otherPositions = positions.filter(position => position.mint !== mintAddress);
      return [...currentMintPositions, ...otherPositions];
    }
    
    return positions; // Show All (Êó†ÂΩìÂâç mint)
  };

  const displayedPositions = getFilteredPositions();

  const handleRefresh = async () => {
    setIsRefreshing(true);
    await fetchPositions();
    setTimeout(() => {
      setIsRefreshing(false);
    }, 500);
  };

  const handleClosePosition = (positionId) => {
    console.log(`Âπ≥‰ªìÊåÅ‰ªì ${positionId}`);
  };

  const handlePartialClose = (positionId) => {
    console.log(`ÈÉ®ÂàÜÂπ≥‰ªì ${positionId}`);
  };

  const handleBoost = (positionId) => {
    console.log(`Â¢ûÂº∫ÊåÅ‰ªì ${positionId}`);
  };

  return (
    <div className="bg-white border-4 border-black rounded-2xl h-fit mt-4">
      {/* Â§¥ÈÉ®Âå∫Âüü */}
      <div className="p-4 border-b-2 border-black flex justify-between items-center">
        <h2 className="text-lg font-nunito text-black">Margin Position List</h2>
        <div className="flex items-center space-x-4">
          <button 
            onClick={handleFilterToggle}
            className="text-sm text-gray-600 hover:text-black flex items-center font-nunito transition-colors"
          >
            <AdjustmentsHorizontalIcon className="h-5 w-5 mr-1" />
            {filterMode === 'all' ? 'Show One' : 'Show All'}
          </button>
          <button 
            onClick={handleRefresh}
            disabled={isRefreshing}
            className="text-sm text-gray-600 hover:text-black flex items-center font-nunito transition-colors disabled:opacity-50"
          >
            <ArrowPathIcon className={`h-5 w-5 mr-1 ${isRefreshing ? 'animate-spin' : ''}`} />
            Refresh
          </button>
        </div>
      </div>

      {/* ÊåÅ‰ªìÂàóË°®Âå∫Âüü */}
      <div className="p-4 space-y-4">
        {isLoading && positions.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            <div className="text-2xl mb-2">‚è≥</div>
            <div className="font-nunito text-lg">Loading Positions...</div>
          </div>
        ) : error ? (
          <div className="text-center py-8 text-red-500">
            <div className="text-2xl mb-2">‚ùå</div>
            <div className="font-nunito text-lg">Failed to Load</div>
            <div className="text-sm mt-1">{error}</div>
            <button 
              onClick={handleRefresh}
              className="mt-2 px-4 py-2 bg-red-500 text-white rounded font-nunito text-sm hover:bg-red-600"
            >
              Retry
            </button>
          </div>
        ) : !connected ? (
          <div className="text-center py-8 text-gray-500">
            <div className="text-3xl mb-2">üîå</div>
            <div className="font-nunito text-lg">Connect Wallet</div>
            <div className="text-sm mt-1">Please connect your wallet to view positions</div>
          </div>
        ) : displayedPositions.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            <div className="text-3xl mb-2">üìä</div>
            <div className="font-nunito text-lg">No Positions</div>
            <div className="text-sm mt-1">Start your first trade in the trading panel!</div>
          </div>
        ) : (
          displayedPositions.map((position) => (
            <PositionItem
              key={position.id}
              position={position}
              onClose={() => handleClosePosition(position.id)}
              onPartialClose={() => handlePartialClose(position.id)}
              _onInfo={() => handleBoost(position.id)}
              onRefresh={fetchPositions}
            />
          ))
        )}
      </div>

      {/* ËøáÊª§Áä∂ÊÄÅÊèêÁ§∫ */}
      {filterMode === 'current' && mintAddress && (
        <div className="p-2 bg-blue-50 border-t-2 border-black text-center">
          <div className="text-xs text-blue-600 font-nunito">
            Showing positions for current token only
          </div>
        </div>
      )}
    </div>
  );
};

export default PositionPanel;